"use strict";const prefix="___",captureShowClass="___capture-show",captureHideClass="___capture-hide",forceOverflowClass="___force-overflow",defaultOptions={excludedNodes:[],margin:{top:0,right:0,bottom:0,left:0},padding:{top:0,right:0,bottom:0,left:0},returnType:"dataUrl",targetNode:document.body};let config=defaultOptions;function addClasses(e){e.classList.add(captureShowClass);let t=e.parentElement;for(const e of config.excludedNodes)e.classList.add(captureHideClass);for(;t;)t.classList.add(forceOverflowClass),t=t.parentElement}function removeClasses(e){e.classList.remove(captureShowClass);let t=e.parentElement;for(const e of config.excludedNodes)e.classList.remove(captureHideClass);for(;t;)t.classList.remove(forceOverflowClass),t=t.parentElement}function serializeHead(){const e=document.head.cloneNode(!0),t=document.createElement("style");return t.innerText+=`body {transform: translateY(${window.outerHeight}px) !important; overflow: visible;}`,t.innerText+=`.${captureShowClass} {transform: translateY(-${window.outerHeight}px) !important;}`,t.innerText+=`.${forceOverflowClass} {overflow: visible !important;}`,e.appendChild(t),(new XMLSerializer).serializeToString(e)}function serializeBody(){return(new XMLSerializer).serializeToString(document.body).replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,"")}function combineToSvg(e,t){addClasses(e);const o=serializeHead(),r=serializeBody(),s=-t.left,i=-t.top;let a="";return a+=`<svg xmlns="http://www.w3.org/2000/svg" width="${t.width}" height="${t.height}">`,a+=`<foreignObject x="${s}" y="${i}" width="${window.outerWidth}" height="${window.outerHeight}"><html xmlns="http://www.w3.org/1999/xhtml">${o}${r}</html></foreignObject>`,a+="</svg>",removeClasses(e),a}function NodeToDataURL(e){const t=(config=Object.assign({},defaultOptions,e)).targetNode,o=t.getBoundingClientRect(),r=combineToSvg(t,o),s=`data:image/svg+xml;base64,${btoa(r)}`,i=document.createElement("canvas");return new Promise((e,t)=>{if(i){const r=document.createElement("img");r.src=s,r.addEventListener("load",()=>{i.width=o.width,i.height=o.height,i.getContext("2d").drawImage(r,0,0),e(i.toDataURL())}),r.addEventListener("error",()=>{t()})}else t()})}module.exports=NodeToDataURL;